package com.sukhad;

import java.util.*;

class Process implements Comparable<Process>
{
	String name;
	int arrival_time;
	int burst_time;
	int tw;
	int tat;

	public Process(String name, int arrival_time, int burst_time) {
		super();
		this.name = name;
		this.arrival_time = arrival_time;
		this.burst_time = burst_time;
		this.tw = 0;
		this.tat = 0;
	}

	@Override
	public int compareTo(Process process) {
	
		if(this.burst_time > process.burst_time)
		{
			return 1;
		}
		else if(this.burst_time < process.burst_time)
		{
			return -1;
		}
		return 0;
	}

	@Override
	public String toString() {
		return "Process [name=" + name + ", arrival_time=" + arrival_time + ", burst_time=" + burst_time + ", tw=" + tw
				+ ", tat=" + tat + "]";
	}
	
	
	

}

public class SJF {
	
	ArrayList<Process> processes;
	int num_processes;
	PriorityQueue<Integer> mileStones;
	
	SJF()
	{
		processes = new ArrayList<>();
		this.mileStones = new PriorityQueue<>();
	}

	
	public void get_processes()
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number of processes:");
		this.num_processes = sc.nextInt();
		
		String name;
		int arrival_time, burst_time;
		
		System.out.println("Enter the process name, arrival time and burst time");
		
		for(int i=0;i<num_processes;i++)
		{
			name = sc.next();
			arrival_time = sc.nextInt();
			burst_time = sc.nextInt();
			
			if(!this.mileStones.contains(arrival_time))
			{
				// add all the different arrival times
				this.mileStones.add(arrival_time);
			}
			this.processes.add(new Process(name,arrival_time,burst_time));
		}
	}
	
	public void display()
	{
		for(Process p : this.processes)
		{
			System.out.println(p);
		}
		
		for(int i : this.mileStones)
		{
			System.out.println(i);
		}
	}

	private void add_jobs_queue(PriorityQueue<Process> jobs, int stop)
	{
		// adds all the jobs having arrival time equal to stop
		for(Process p : this.processes)
		{
			if(p.arrival_time==stop)
			{
				jobs.add(p);
			}
		}
	}

	public void schedule()
	{
		PriorityQueue<Process> jobs = new PriorityQueue<Process>();
		
		int stop = this.mileStones.peek();
		int current_time = 0;
		
		while(!this.processes.isEmpty())
		{
			if(current_time==stop)
			{
				// time to add new jobs and change queue accordingly
				this.add_jobs_queue(jobs, stop);
			}
			
			if(this.mileStones.isEmpty())
			{
				// all process are there - safe to execute normally
				break;
			}
			
			Process p = jobs.poll();
			if(current)
			
		}
		
	}
	
	public static void main(String args[])
	{
		SJF sjf = new SJF();
		sjf.get_processes();
		sjf.display();
		sjf.schedule();
	}
}
