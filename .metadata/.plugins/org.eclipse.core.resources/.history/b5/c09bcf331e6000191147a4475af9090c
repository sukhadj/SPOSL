package com.sukhad;

import java.util.*;

public class Optimal {
	
	int frame_capacity;
	
	Optimal()
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the page frame capacity");
		this.frame_capacity = sc.nextInt();
		
		
	}
	
	// helper function to find the page not used for the longest period of time 
	private int findPageToReplace(ArrayList<Integer> frame,ArrayList<Integer> sequence, 
									int startIndex)
	{
		int index = 0;
		int longestIndex = 0;
		
		for(int i=0;i<frame.size();i++)
		{
			int page = frame.get(i);
			int j = startIndex;
			while(j<sequence.size())
			{
				if(page==sequence.get(j))
				{
					break;
				}
				j++;
			}
			
			if(j>longestIndex)
			{
				longestIndex = j;
				index = i;
			}
		}
		
		
		return index;
	}
	
	// helper function to print the frame
	void printFrame(ArrayList<Integer> frame)
	{
		for(int page: frame)
		{
			System.out.println(page);
		}
		
		System.out.println("====");
	}
	
	public void optimal_page_replacement(ArrayList<Integer> sequence, int seqLen)
	{
		int page_fault=0;
		int page_hit=0;
		
		float page_ratio=0;
		
		ArrayList<Integer> frame = new ArrayList<Integer>();
		
		int page;
		
		for(int i=0;i<sequence.size();i++)
		{
			page = sequence.get(i);
			
			if(frame.contains(page))
			{
				// no need to change
				page_hit++;
				continue;
			}
			
			if(frame.size()<this.frame_capacity)
			{
				// the frame still has space to add new page
				frame.add(page);
				page_fault++;
				continue;
			}
			
			// the frame is full and replace
			int index = this.findPageToReplace(frame, sequence, i);
			frame.set(index, page); 
			
			this.printFrame(frame);
		}
	}
	
	public static void main(String args[])
	{
		Optimal opt = new Optimal();
	}
	
	
}
